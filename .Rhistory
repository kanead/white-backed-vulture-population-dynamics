# [1] " +proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs +towgs84=0,0,0"
proj4string(Kruger)
# [1] " +proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs +towgs84=0,0,0"
proj4string(spdf) == proj4string(Kruger)
plot(Kruger)
plot(spdf, col="red" , add=TRUE)
res <- over(spdf, Kruger)
summary(res$NAME)
22/223
rm(list=ls(all=TRUE))
library(maptools)
library(SDMTools)
library(raster)
library(sp)
setwd("C:\\Users\\akane\\Desktop\\Science\\Manuscripts\\White-backed Vulture Pop Dynamics\\Code\\white-backed-vulture-population-dynamics")
mydata<-read.csv("resights.csv",header = T,sep = ",")
#mydata<-head(mydata)
crswgs84=CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0")
Kruger=readShapePoly("WDPA_July2017_protected_area_873-shapefile-polygons.shp",proj4string=crswgs84,verbose=TRUE)
#plot(Kruger)
#KrugerPoints <- mydata[mydata$Location=="Kruger" , ]
#KrugerPoints<-droplevels(KrugerPoints)
#KZNPoints <- mydata[mydata$Location=="KZN" , ]
#KZNPoints<-droplevels(KZNPoints)
#points(KrugerPoints$Latitude ~ KrugerPoints$Longitude, col = "red", cex = 1)
#points(KZNPoints$Latitude ~ KZNPoints$Longitude, col = "blue", cex = 1)
# One useful function that we will see in this post is the gContains function from the rgeos package.
# This function checks whether a polygon contains a point or more generally whether a geometry contains another geometry.
mydata <- mydata[mydata$Location=="Kruger" , ]
mydata<-droplevels(mydata)
xy <- mydata[,c(3,2)]
xy<-droplevels(xy)
spdf <- SpatialPointsDataFrame(coords = xy, data = xy,
proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))
proj4string(spdf)
# [1] " +proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs +towgs84=0,0,0"
proj4string(Kruger)
# [1] " +proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs +towgs84=0,0,0"
proj4string(spdf) == proj4string(Kruger)
plot(Kruger)
plot(spdf, col="red" , add=TRUE)
res <- over(spdf, Kruger)
summary(res$NAME)
75/(75+701)
mydata %>%
group_by(Location)
library(dplyr)
mydata %>%
group_by(Location)
rm(list=ls(all=TRUE))
library(maptools)
library(SDMTools)
library(raster)
library(sp)
library(dplyr)
setwd("C:\\Users\\akane\\Desktop\\Science\\Manuscripts\\White-backed Vulture Pop Dynamics\\Code\\white-backed-vulture-population-dynamics")
mydata<-read.csv("resights.csv",header = T,sep = ",")
#mydata<-head(mydata)
crswgs84=CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0")
Kruger=readShapePoly("WDPA_July2017_protected_area_873-shapefile-polygons.shp",proj4string=crswgs84,verbose=TRUE)
#plot(Kruger)
#KrugerPoints <- mydata[mydata$Location=="Kruger" , ]
#KrugerPoints<-droplevels(KrugerPoints)
#KZNPoints <- mydata[mydata$Location=="KZN" , ]
#KZNPoints<-droplevels(KZNPoints)
#points(KrugerPoints$Latitude ~ KrugerPoints$Longitude, col = "red", cex = 1)
#points(KZNPoints$Latitude ~ KZNPoints$Longitude, col = "blue", cex = 1)
# One useful function that we will see in this post is the gContains function from the rgeos package.
# This function checks whether a polygon contains a point or more generally whether a geometry contains another geometry.
#mydata <- mydata[mydata$Location=="Kruger" , ]
#mydata<-droplevels(mydata)
mydata %>%
group_by(Location)
xy <- mydata[,c(3,2)]
xy<-droplevels(xy)
spdf <- SpatialPointsDataFrame(coords = xy, data = xy,
proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))
proj4string(spdf)
proj4string(Kruger)
proj4string(spdf) == proj4string(Kruger)
plot(Kruger)
plot(spdf, col="red" , add=TRUE)
res <- over(spdf, Kruger)
summary(res$NAME)
class(mydata)
mydata
rm(list=ls(all=TRUE))
library(maptools)
library(SDMTools)
library(raster)
library(sp)
library(dplyr)
setwd("C:\\Users\\akane\\Desktop\\Science\\Manuscripts\\White-backed Vulture Pop Dynamics\\Code\\white-backed-vulture-population-dynamics")
mydata<-read.csv("resights.csv",header = T,sep = ",")
#mydata<-head(mydata)
crswgs84=CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0")
Kruger=readShapePoly("WDPA_July2017_protected_area_873-shapefile-polygons.shp",proj4string=crswgs84,verbose=TRUE)
#plot(Kruger)
#KrugerPoints <- mydata[mydata$Location=="Kruger" , ]
#KrugerPoints<-droplevels(KrugerPoints)
#KZNPoints <- mydata[mydata$Location=="KZN" , ]
#KZNPoints<-droplevels(KZNPoints)
#points(KrugerPoints$Latitude ~ KrugerPoints$Longitude, col = "red", cex = 1)
#points(KZNPoints$Latitude ~ KZNPoints$Longitude, col = "blue", cex = 1)
# One useful function that we will see in this post is the gContains function from the rgeos package.
# This function checks whether a polygon contains a point or more generally whether a geometry contains another geometry.
#mydata <- mydata[mydata$Location=="Kruger" , ]
#mydata<-droplevels(mydata)
mydata<-mydata %>%
group_by(Location)
class(mydata)
xy <- mydata[,c(3,2)]
xy<-droplevels(xy)
spdf <- SpatialPointsDataFrame(coords = xy, data = xy,
proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))
proj4string(spdf)
proj4string(Kruger)
proj4string(spdf) == proj4string(Kruger)
plot(Kruger)
plot(spdf, col="red" , add=TRUE)
res <- over(spdf, Kruger)
summary(res$NAME)
class(mydata)
rm(list=ls(all=TRUE))
library(maptools)
library(SDMTools)
library(raster)
library(sp)
library(dplyr)
setwd("C:\\Users\\akane\\Desktop\\Science\\Manuscripts\\White-backed Vulture Pop Dynamics\\Code\\white-backed-vulture-population-dynamics")
mydata<-read.csv("resights.csv",header = T,sep = ",")
#mydata<-head(mydata)
crswgs84=CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0")
Kruger=readShapePoly("WDPA_July2017_protected_area_873-shapefile-polygons.shp",proj4string=crswgs84,verbose=TRUE)
#plot(Kruger)
#KrugerPoints <- mydata[mydata$Location=="Kruger" , ]
#KrugerPoints<-droplevels(KrugerPoints)
#KZNPoints <- mydata[mydata$Location=="KZN" , ]
#KZNPoints<-droplevels(KZNPoints)
#points(KrugerPoints$Latitude ~ KrugerPoints$Longitude, col = "red", cex = 1)
#points(KZNPoints$Latitude ~ KZNPoints$Longitude, col = "blue", cex = 1)
# One useful function that we will see in this post is the gContains function from the rgeos package.
# This function checks whether a polygon contains a point or more generally whether a geometry contains another geometry.
#mydata <- mydata[mydata$Location=="Kruger" , ]
#mydata<-droplevels(mydata)
mydata<-mydata %>%
group_by(Location)
%>%
xy <- mydata[,c(3,2)]
xy<-droplevels(xy)
spdf <- SpatialPointsDataFrame(coords = xy, data = xy,
proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))
proj4string(spdf)
# [1] " +proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs +towgs84=0,0,0"
proj4string(Kruger)
# [1] " +proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs +towgs84=0,0,0"
proj4string(spdf) == proj4string(Kruger)
plot(Kruger)
plot(spdf, col="red" , add=TRUE)
res <- over(spdf, Kruger)
summary(res$NAME)
rm(list=ls(all=TRUE))
library(maptools)
library(SDMTools)
library(raster)
library(sp)
library(dplyr)
setwd("C:\\Users\\akane\\Desktop\\Science\\Manuscripts\\White-backed Vulture Pop Dynamics\\Code\\white-backed-vulture-population-dynamics")
mydata<-read.csv("resights.csv",header = T,sep = ",")
#mydata<-head(mydata)
crswgs84=CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0")
Kruger=readShapePoly("WDPA_July2017_protected_area_873-shapefile-polygons.shp",proj4string=crswgs84,verbose=TRUE)
#plot(Kruger)
#KrugerPoints <- mydata[mydata$Location=="Kruger" , ]
#KrugerPoints<-droplevels(KrugerPoints)
#KZNPoints <- mydata[mydata$Location=="KZN" , ]
#KZNPoints<-droplevels(KZNPoints)
#points(KrugerPoints$Latitude ~ KrugerPoints$Longitude, col = "red", cex = 1)
#points(KZNPoints$Latitude ~ KZNPoints$Longitude, col = "blue", cex = 1)
# One useful function that we will see in this post is the gContains function from the rgeos package.
# This function checks whether a polygon contains a point or more generally whether a geometry contains another geometry.
#mydata <- mydata[mydata$Location=="Kruger" , ]
#mydata<-droplevels(mydata)
mydata<- mydata %>%
group_by(Location)
mydata
mydata<- mydata %>%
group_by(Location) %>%
mydata[,c(3,2)]  %>%
droplevels(xy)
mydata<- mydata %>%
group_by(Location) %>%
mydata[,c(3,2)]
rm(list=ls(all=TRUE))
library(maptools)
library(SDMTools)
library(raster)
library(sp)
library(dplyr)
setwd("C:\\Users\\akane\\Desktop\\Science\\Manuscripts\\White-backed Vulture Pop Dynamics\\Code\\white-backed-vulture-population-dynamics")
mydata<-read.csv("resights.csv",header = T,sep = ",")
#mydata<-head(mydata)
crswgs84=CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0")
Kruger=readShapePoly("WDPA_July2017_protected_area_873-shapefile-polygons.shp",proj4string=crswgs84,verbose=TRUE)
#plot(Kruger)
#KrugerPoints <- mydata[mydata$Location=="Kruger" , ]
#KrugerPoints<-droplevels(KrugerPoints)
#KZNPoints <- mydata[mydata$Location=="KZN" , ]
#KZNPoints<-droplevels(KZNPoints)
#points(KrugerPoints$Latitude ~ KrugerPoints$Longitude, col = "red", cex = 1)
#points(KZNPoints$Latitude ~ KZNPoints$Longitude, col = "blue", cex = 1)
# One useful function that we will see in this post is the gContains function from the rgeos package.
# This function checks whether a polygon contains a point or more generally whether a geometry contains another geometry.
#mydata <- mydata[mydata$Location=="Kruger" , ]
#mydata<-droplevels(mydata)
xy <- mydata[,c(3,2)]
xy<-droplevels(xy)
spdf <- SpatialPointsDataFrame(coords = xy, data = xy,
proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))
proj4string(spdf)
# [1] " +proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs +towgs84=0,0,0"
proj4string(Kruger)
# [1] " +proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs +towgs84=0,0,0"
proj4string(spdf) == proj4string(Kruger)
plot(Kruger)
plot(spdf, col="red" , add=TRUE)
res <- over(spdf, Kruger)
summary(res$NAME)
levels(mydata$Age)
rm(list=ls(all=TRUE))
library(maptools)
library(SDMTools)
library(raster)
library(sp)
library(dplyr)
setwd("C:\\Users\\akane\\Desktop\\Science\\Manuscripts\\White-backed Vulture Pop Dynamics\\Code\\white-backed-vulture-population-dynamics")
mydata<-read.csv("resights.csv",header = T,sep = ",")
#mydata<-head(mydata)
crswgs84=CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0")
Kruger=readShapePoly("WDPA_July2017_protected_area_873-shapefile-polygons.shp",proj4string=crswgs84,verbose=TRUE)
#plot(Kruger)
#KrugerPoints <- mydata[mydata$Location=="Kruger" , ]
#KrugerPoints<-droplevels(KrugerPoints)
#KZNPoints <- mydata[mydata$Location=="KZN" , ]
#KZNPoints<-droplevels(KZNPoints)
#points(KrugerPoints$Latitude ~ KrugerPoints$Longitude, col = "red", cex = 1)
#points(KZNPoints$Latitude ~ KZNPoints$Longitude, col = "blue", cex = 1)
# One useful function that we will see in this post is the gContains function from the rgeos package.
# This function checks whether a polygon contains a point or more generally whether a geometry contains another geometry.
#mydata <- mydata[mydata$Location=="Kruger" , ]
#mydata<-droplevels(mydata)
xy <- mydata[,c(3,2)]
xy<-droplevels(xy)
spdf <- SpatialPointsDataFrame(coords = xy, data = xy,
proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))
proj4string(spdf)
# [1] " +proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs +towgs84=0,0,0"
proj4string(Kruger)
# [1] " +proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs +towgs84=0,0,0"
proj4string(spdf) == proj4string(Kruger)
plot(Kruger)
plot(spdf, col="red" , add=TRUE)
res <- over(spdf, Kruger)
summary(res$NAME)
rm(list=ls(all=TRUE))
library(maptools)
library(SDMTools)
library(raster)
library(sp)
library(dplyr)
setwd("C:\\Users\\akane\\Desktop\\Science\\Manuscripts\\White-backed Vulture Pop Dynamics\\Code\\white-backed-vulture-population-dynamics")
mydata<-read.csv("resights.csv",header = T,sep = ",")
#mydata<-head(mydata)
crswgs84=CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0")
Kruger=readShapePoly("WDPA_July2017_protected_area_873-shapefile-polygons.shp",proj4string=crswgs84,verbose=TRUE)
#plot(Kruger)
#KrugerPoints <- mydata[mydata$Location=="Kruger" , ]
#KrugerPoints<-droplevels(KrugerPoints)
#KZNPoints <- mydata[mydata$Location=="KZN" , ]
#KZNPoints<-droplevels(KZNPoints)
#points(KrugerPoints$Latitude ~ KrugerPoints$Longitude, col = "red", cex = 1)
#points(KZNPoints$Latitude ~ KZNPoints$Longitude, col = "blue", cex = 1)
# One useful function that we will see in this post is the gContains function from the rgeos package.
# This function checks whether a polygon contains a point or more generally whether a geometry contains another geometry.
mydata <- mydata[mydata$Location=="Kruger" , ]
mydata<-droplevels(mydata)
xy <- mydata[,c(3,2)]
xy<-droplevels(xy)
spdf <- SpatialPointsDataFrame(coords = xy, data = xy,
proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))
proj4string(spdf)
# [1] " +proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs +towgs84=0,0,0"
proj4string(Kruger)
# [1] " +proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs +towgs84=0,0,0"
proj4string(spdf) == proj4string(Kruger)
plot(Kruger)
plot(spdf, col="red" , add=TRUE)
res <- over(spdf, Kruger)
summary(res$NAME)
####################################################################################
#mydata<- mydata %>%
#  group_by(Location) %>%
#  mydata[,c(3,2)]  %>%
#  droplevels(xy)
#spdf <- SpatialPointsDataFrame(coords = xy, data = xy,
#                      proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))
#proj4string(spdf)
# [1] " +proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs +towgs84=0,0,0"
#proj4string(Kruger)
# [1] " +proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs +towgs84=0,0,0"
#proj4string(spdf) == proj4string(Kruger)
#plot(Kruger)
#plot(spdf, col="red" , add=TRUE)
#res <- over(spdf, Kruger)
#summary(res$NAME)
rm(list=ls(all=TRUE))
library(maptools)
library(SDMTools)
library(raster)
library(sp)
library(dplyr)
setwd("C:\\Users\\akane\\Desktop\\Science\\Manuscripts\\White-backed Vulture Pop Dynamics\\Code\\white-backed-vulture-population-dynamics")
mydata<-read.csv("resights.csv",header = T,sep = ",")
#mydata<-head(mydata)
crswgs84=CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0")
Kruger=readShapePoly("WDPA_July2017_protected_area_873-shapefile-polygons.shp",proj4string=crswgs84,verbose=TRUE)
#plot(Kruger)
#KrugerPoints <- mydata[mydata$Location=="Kruger" , ]
#KrugerPoints<-droplevels(KrugerPoints)
#KZNPoints <- mydata[mydata$Location=="KZN" , ]
#KZNPoints<-droplevels(KZNPoints)
#points(KrugerPoints$Latitude ~ KrugerPoints$Longitude, col = "red", cex = 1)
#points(KZNPoints$Latitude ~ KZNPoints$Longitude, col = "blue", cex = 1)
# One useful function that we will see in this post is the gContains function from the rgeos package.
# This function checks whether a polygon contains a point or more generally whether a geometry contains another geometry.
mydata <- mydata[mydata$Location=="Kruger" , ]
mydata<-droplevels(mydata)
xy <- mydata[,c(3,2)]
xy<-droplevels(xy)
spdf <- SpatialPointsDataFrame(coords = xy, data = xy,
proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))
proj4string(spdf)
# [1] " +proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs +towgs84=0,0,0"
proj4string(Kruger)
# [1] " +proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs +towgs84=0,0,0"
proj4string(spdf) == proj4string(Kruger)
plot(Kruger)
plot(spdf, col="red" , add=TRUE)
res <- over(spdf, Kruger)
summary(res$NAME)
75/(75+701)
rm(list=ls(all=TRUE))
library(maptools)
library(SDMTools)
library(raster)
library(sp)
library(dplyr)
setwd("C:\\Users\\akane\\Desktop\\Science\\Manuscripts\\White-backed Vulture Pop Dynamics\\Code\\white-backed-vulture-population-dynamics")
mydata<-read.csv("resights.csv",header = T,sep = ",")
#mydata<-head(mydata)
crswgs84=CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0")
Kruger=readShapePoly("WDPA_July2017_protected_area_873-shapefile-polygons.shp",proj4string=crswgs84,verbose=TRUE)
#plot(Kruger)
#KrugerPoints <- mydata[mydata$Location=="Kruger" , ]
#KrugerPoints<-droplevels(KrugerPoints)
#KZNPoints <- mydata[mydata$Location=="KZN" , ]
#KZNPoints<-droplevels(KZNPoints)
#points(KrugerPoints$Latitude ~ KrugerPoints$Longitude, col = "red", cex = 1)
#points(KZNPoints$Latitude ~ KZNPoints$Longitude, col = "blue", cex = 1)
# One useful function that we will see in this post is the gContains function from the rgeos package.
# This function checks whether a polygon contains a point or more generally whether a geometry contains another geometry.
mydata <- mydata[mydata$Location=="KZN" , ]
mydata<-droplevels(mydata)
xy <- mydata[,c(3,2)]
xy<-droplevels(xy)
spdf <- SpatialPointsDataFrame(coords = xy, data = xy,
proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))
proj4string(spdf)
# [1] " +proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs +towgs84=0,0,0"
proj4string(Kruger)
# [1] " +proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs +towgs84=0,0,0"
proj4string(spdf) == proj4string(Kruger)
plot(Kruger)
plot(spdf, col="red" , add=TRUE)
res <- over(spdf, Kruger)
summary(res$NAME)
####################################################################################
#mydata<- mydata %>%
#  group_by(Location) %>%
#  mydata[,c(3,2)]  %>%
#  droplevels(xy)
#spdf <- SpatialPointsDataFrame(coords = xy, data = xy,
#                      proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))
#proj4string(spdf)
# [1] " +proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs +towgs84=0,0,0"
#proj4string(Kruger)
# [1] " +proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs +towgs84=0,0,0"
#proj4string(spdf) == proj4string(Kruger)
#plot(Kruger)
#plot(spdf, col="red" , add=TRUE)
#res <- over(spdf, Kruger)
#summary(res$NAME)
75/(75+701)
22/(22+201)
# --------------------------------------------------
# MATRIX POPULATION MODEL FOR AFRICAN WHITE BACKED VULTURES
# --------------------------------------------------
# useful link http://www.mbr-pwrc.usgs.gov/workshops/uf2016/
# clean everything first
rm(list=ls())
# load required packages
library(popbio)
library(diagram)
#--------------------------------------------
# PARAMETERS
#--------------------------------------------
# fecundity calculation, (Gauthier & Lebreton (2004) Population models for Greater Snow Geese)
bp <- 0.85 # breeding propensity
cs <- 1 # clutch size
hs <- 0.76 # hatching success
fs <- 0.6 # fledging success
f1 <- bp * (cs/2) * hs * fs # divide by 2 to get females only
# survival
s0 <- 0.42 # first year survival
s1Kr <- 0.82 # juvenile survival Kruger
s2Kr <- 0.89 # subadult survival Kruger
s3Kr <- 1.0 # adult survival Kruger
#--------------------------------------------
# KRUGER POST-BREEDING CENSUS
#--------------------------------------------
# survival this year is multiplied by fecundity next year because in this model
# the birds have to survive the year before they become breeders i.e. from 4 years old to
# breeding age at 5 years old - s2Kr*f1
# create the matrix for Kruger
MKrPost <- c(0,0,0,0,s2Kr*f1,s3Kr*f1,
s0,0,0,0,0,0,
0,s1Kr,0,0,0,0,
0,0,s1Kr,0,0,0,
0,0,0,s2Kr,0,0,
0,0,0,0,s2Kr,s3Kr
)
MKrPost <- matrix ((MKrPost), ncol=6, byrow = TRUE)
# previous function is wrapped up into pop.projection
popKrugerPost<-eigen.analysis(MKrPost, zero=TRUE)
popKrugerPost$lambda1
#--------------------------------------------
# KRUGER PRE-BREEDING CENSUS
#--------------------------------------------
MKrpre <- c(0,0,0,0,s0*f1,
s1Kr,0,0,0,0,
0,s1Kr,0,0,0,
0,0,s2Kr,0,0,
0,0,0,s2Kr,s3Kr)
MKrpre <- matrix ((MKrpre), ncol=5, byrow = TRUE)
# previous function is wrapped up into pop.projection
popKrugerPre<-eigen.analysis(MKrpre, zero=TRUE)
popKrugerPre$lambda1
#--------------------------------------------
# KZN SURVIVAL RATES
#--------------------------------------------
s1Kz <-  0.86 # juvenile survival KZN
s2Kz <- 0.51 # subadult survival KZN
s3Kz <- 0.57 # adult survival KZN
#--------------------------------------------
# KZN POST-BREEDING CENSUS
#--------------------------------------------
# create the matrix for Kruger
MKZPost <- c(0,0,0,0,s2Kz*f1,s3Kz*f1,
s0,0,0,0,0,0,
0,s1Kz,0,0,0,0,
0,0,s1Kz,0,0,0,
0,0,0,s2Kz,0,0,
0,0,0,0,s2Kz,s3Kz
)
MKZPost <- matrix ((MKZPost), ncol=6, byrow = TRUE)
# previous function is wrapped up into pop.projection
popKZPost<-eigen.analysis(MKZPost, zero=TRUE)
popKZPost$lambda1
#--------------------------------------------
# KZN PRE-BREEDING CENSUS
#--------------------------------------------
MKZpre <- c(0,0,0,0,s0*f1,
s1Kz,0,0,0,0,
0,s1Kz,0,0,0,
0,0,s2Kz,0,0,
0,0,0,s2Kz,s3Kz)
MKZpre <- matrix ((MKZpre), ncol=5, byrow = TRUE)
# previous function is wrapped up into pop.projection
popKZPre<-eigen.analysis(MKZpre, zero=TRUE)
popKZPre$lambda1
#--------------------------------------------
# MEGAMATRIX FOR METAPOPULATION STRUCTURE
#--------------------------------------------
# Effective migration rates (dispersal * stage-specific survival)
gb <- 0.9 # Disperal from Kruger to KZN
bg <- 0.1 # Disperal from KZN to Kruger
# resight proportions from data
# Kruger origin birds - 75 within 701 outside ~ 10% stay within the park
# KZN origin birds - 22 within 201 outside ~ 10% stay within KZN
A <- matrix(c(
0,  0,  0,  0,  s0*f1,  0,  0,  0,  0, 0,
s1Kr*(1-gb), 0, 0, 0, 0, s1Kz*bg, 0, 0, 0, 0,
0, s1Kr*(1-gb), 0, 0, 0, 0, s1Kz*bg, 0, 0, 0,
0, 0, s2Kr*(1-gb), 0, 0, 0, 0, s2Kz*bg, 0, 0,
0, 0, 0, s2Kr*(1-gb), s3Kr*(1-gb), 0, 0, 0, s2Kz*bg, s3Kz*bg,
0, 0, 0, 0, 0, 0, 0, 0, 0, s0*f1,
s1Kr*gb, 0, 0, 0, 0, s1Kz*(1-bg), 0, 0, 0, 0,
0, s1Kr*gb, 0, 0, 0, 0, s1Kz*(1-bg), 0, 0, 0,
0, 0, s2Kr*gb, 0, 0, 0, 0, s2Kz*(1-bg), 0, 0,
0, 0, 0, s2Kr*gb, s3Kr*gb, 0, 0, 0, s2Kz*(1-bg), s3Kz*(1-bg)), nrow = 10, byrow = TRUE)
A
lambda(A)
